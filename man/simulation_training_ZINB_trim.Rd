% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulation_training_ZINB.R
\name{simulation_training_ZINB_trim}
\alias{simulation_training_ZINB_trim}
\title{Trim Bayesian model fitting result}
\usage{
simulation_training_ZINB_trim(simulation.params)
}
\arguments{
\item{simulation.params}{The list returned by simulation_training_ZINB}
}
\value{
A list containing the trimmed model fitting result:
\item{data2fit}{A data frame containing the input data for fitting the Bayesian model.}
\item{model.summary}{A named list with elements \code{summary} and \code{c_summary}, which contain summaries of a stanfit object.}
\item{fixed.effect}{A named list with elements \code{summary} and \code{c_summary}, which contain summaries of specified parameters.}
\item{c_i_full}{A matrix containing the estimated gene specific intercept \eqn{c_i} for each gene.}
\item{gamma_i_full}{A matrix containing the estimated gene specific coefficient \eqn{\gamma_i} for each gene.}
\item{lib.size}{A numeric vector containing the library size, i.e., total number of molecule per cell, of cells in the spatial transcriptomics data.}
\item{posterior}{A list containing the extracted samples of variables in the Bayesian model from their posterior distribution.}
}
\description{
simulation_training_ZINB_trim takes the result returned by simulation_training_ZINB and reduces its size by keeping the minimum amount of information needed for future use (e.g., simulate new spatial transcriptomics data using fitted model)
}
\examples{
data(sc_count)
data(sc_cluster)
data(spatial_count)
data(spatial_cluster)
overlap_gene = intersect(unique(rownames(sc_count)),unique(rownames(spatial_count)))
unique_cluster_label=intersect(as.character(unique(sc_cluster$class_label)),
                               as.character(unique(spatial_cluster$class_label)))
outputpath = "~"
simulation.params=simulation_training_ZINB(sc_count = sc_count,
                                           spatial_count = spatial_count,
                                           overlap_gene = overlap_gene,
                                           unique_cluster_label = unique_cluster_label,
                                           sc_cluster = sc_cluster,
                                           spatial_cluster = spatial_cluster,
                                           outputpath = outputpath,
                                           optimizer = "variational_inference",
                                           mcmc.check = FALSE,
                                           num.iter = 300,
                                           num.chain = 4,
                                           num.core = 4,
                                           max.treedepth = 10,
                                           seed = 3,
                                           saveplot = FALSE)

#check object size
format(object.size(simulation.params), units = "Mb")

simulation.params.trimmed = simulation_training_ZINB_trim(simulation.params)

#check object size again
format(object.size(simulation.params.trimmed), units = "Mb")
}
